(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.dateFormatter = dateFormatter;

function dateFormatter(date) {
  var dateString = '';
  if (date) {
    dateString = ('0' + date.getHours()).slice(-2) + ':' + ('0' + date.getMinutes()).slice(-2);
  }
  return dateString;
}

;

},{}],2:[function(require,module,exports){
'use strict';

var _dateFormatter = require('./date-formatter');

(function ($) {
  'use strict';

  $.fn.schedule = function (option) {
    var millisecondsToHour = 60 * 60 * 1000;
    var api = undefined;

    // timeline
    var drawTimeLine = function drawTimeLine(timeLine, dateFormatter) {
      var result = '<div class="schedule__timeline">';
      timeLine.slice(0, -1).forEach(function (time) {
        result += '<div class="schedule__time"' + 'style="height:' + time.height + '">' + dateFormatter(time.time) + '</div>';
      });
      return result + '</div>';
    };

    var getTimeLine = function getTimeLine(events) {
      var timeLine = [];
      var timeList = [];
      events.forEach(function (event, i) {
        if (timeList.map(Number).indexOf(event.startTime.valueOf()) === -1) {
          timeList.push(event.startTime);
        }
        if (timeList.map(Number).indexOf(event.endTime.valueOf()) === -1) {
          timeList.push(event.endTime);
        }
      });
      timeList.sort();

      timeList.reduce(function (previousValue, currentValue) {
        var difference;
        var height;
        difference = Math.abs(previousValue - currentValue);
        height = difference * (api.heightHour / millisecondsToHour);
        timeLine.push({
          time: previousValue,
          height: height + 'px'
        });
        return currentValue;
      });
      timeLine.push({
        time: timeList[timeList.length - 1],
        height: 'auto'
      });
      return timeLine;
    };

    //title
    var drawTitles = function drawTitles(columns, titleFormatter) {
      var title = '<div class="schedule__titles">';
      var widthTitle = api.widthTimeBlock;
      columns.forEach(function (column) {
        title += '<div class="schedule__title"' + 'style="width:' + widthTitle + 'px;">' + titleFormatter(column) + '</div>';
      });
      return title + '</div>';
    };

    var titleFormatter = function titleFormatter(column) {
      return '<div>' + column.title + '</div>';
    };

    // events
    var eventsFormatter = function eventsFormatter(event) {
      return '<div>' + event.startTime.getHours() + ':' + event.startTime.getMinutes() + ' - ' + event.endTime.getHours() + ':' + event.endTime.getMinutes() + '</div>' + '<div>' + event.data.title + '</div>' + '<div>' + event.data.text + '</div>';
    };

    var drawEvents = function drawEvents(events, timeLine, eventsFormatter) {
      var result = document.createElement('div');
      var height = getTimeLineHeight(timeLine);
      result.className = 'schedule__events';
      result.style.height = height;
      events.forEach(function (event) {
        var position = getEventPosition(event, timeLine);
        var eventItem = document.createElement('div');
        eventItem.style.position = 'absolute';
        eventItem.style.top = position.top;
        eventItem.style.bottom = position.bottom;
        eventItem.style.left = position.left;
        eventItem.style.width = api.widthTimeBlock;
        eventItem.innerHTML = eventsFormatter(event);
        result.appendChild(eventItem);
      });

      return result;
    };

    var getEventPosition = function getEventPosition(event, timeLine) {
      var position = {};
      position.left = getLeftEventPosition(event.column);
      position.top = getTopEventPosition(event, timeLine);
      position.bottom = getBottomEventPosition(event, timeLine);
      return position;
    };
    var getLeftEventPosition = function getLeftEventPosition(column) {
      var result;
      var width = api.widthTimeBlock;
      result = width * (column - 1) + 'px';
      return result;
    };
    var getTopEventPosition = function getTopEventPosition(event, timeLine) {
      var startEventTime = event.startTime;
      var beginTime = timeLine[0].time;
      var difference = startEventTime - beginTime;
      var top = difference * (api.heightHour / millisecondsToHour);
      return top + 'px';
    };
    var getBottomEventPosition = function getBottomEventPosition(event, timeLine) {
      var endEventTime = event.endTime;
      var endTime = timeLine[timeLine.length - 1].time;
      var difference = endTime - endEventTime;
      var bottom = difference * (api.heightHour / millisecondsToHour);
      return bottom + 'px';
    };

    //data

    var getTimeLineHeight = function getTimeLineHeight(timeline) {
      var start = timeline[0].time;
      var end = timeline[timeline.length - 1].time;
      var difference = end - start;
      var height = difference * (api.heightHour / millisecondsToHour);
      return height;
    };

    var drawSchedule = function drawSchedule(data) {
      var titleHtml = drawTitles(data.columns, api.titleFormatter);
      var timeLine = getTimeLine(data.events);
      var timeLineHtml = drawTimeLine(timeLine, api.dateFormatter);
      var eventsHtml = document.createElement('div');
      eventsHtml.appendChild(drawEvents(data.events, timeLine, api.eventsFormatter));
      schedule.html(timeLineHtml + '<div class="schedule__events-container">' + titleHtml + eventsHtml.innerHTML + '</div>');
    };

    var schedule = this;
    api = $.extend({
      titleFormatter: titleFormatter,
      dateFormatter: _dateFormatter.dateFormatter,
      eventsFormatter: eventsFormatter,
      heightHour: 100,
      widthTimeBlock: 300
    }, option);

    api.data(drawSchedule);
    return this;
  };
})(jQuery);

},{"./date-formatter":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
